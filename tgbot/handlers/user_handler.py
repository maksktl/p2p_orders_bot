from aiogram import Dispatcher
from aiogram.types import Message, ReplyKeyboardRemove, LabeledPrice, PreCheckoutQuery

from tgbot.config import Config
from tgbot.handlers.base import BaseHandler
from tgbot.keyboards.reply import ReplyKeyboard
from tgbot.misc.Item import Item
from tgbot.services.RestService import RestService
from tgbot.services.dto.user_configuration_full_dto import UserConfigurationFullDto


class UserHandler(BaseHandler):
    def __init__(self, dp: Dispatcher):
        self._general_filters = {"bot_access": True}
        super().__init__(dp)

    @staticmethod
    async def user_start(message: Message, config: Config, config_active):
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.chat.first_name}!\n–ù–∞—Å—Ç—Ä–æ–π —Å–≤–æ–π –ø–æ–∏—Å–∫ —Å–≤—è–∑–∫–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=ReplyKeyboard.get_web_app_conf_keyboard(config.tg_bot.webapp_url, config_active)
        )

    @staticmethod
    async def user_not_accessed(message: Message, config: Config):
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã Crypto-Max. \n'
            f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
            reply_markup=ReplyKeyboardRemove()
        )
        item = Item(
            title="–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É",
            description="–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ –º–µ—Å—è—Ü",
            currency="RUB",
            prices=[
                LabeledPrice(
                    label="–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É",
                    amount=1000_00
                )
            ],
            start_parameter="create_invoice",
            photo_url="https://i.ibb.co/vXcNK2K/Color-logo-with-background.png",
            provider_token=config.provider_token
        )

        await message.bot.send_invoice(message.chat.id, **item.generate_invoice(), payload="1")

    @staticmethod
    async def process_pre_checkout_query(query: PreCheckoutQuery, user):
        await query.bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)
        await RestService.get_instance().grant_access_user(user.id, 1)
        await query.bot.send_message(chat_id=query.from_user.id, text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! \n"
                                                                      "–¢–µ–ø–µ—Ä—å –≤—ã –∏–º–µ–µ—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!"
                                                                      "\n"
                                                                      "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")

    @staticmethod
    async def user_lk(message: Message, config, user_configuration: UserConfigurationFullDto, config_active):
        config_text = '‚ùå –ü–æ–∏—Å–∫ —Å–≤—è–∑–æ–∫: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        if user_configuration:
            config_text = f'<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>\n' \
                          f'<b>–§–∏–∞—Ç: üí∞</b> {user_configuration.fiat}\n' \
                          f'<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: üíé</b> {", ".join(user_configuration.asset)}\n' \
                          f'\n' \
                          f'<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç: üìõ</b> {user_configuration.deposit / 100.0}\n' \
                          f'<b>–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ø–æ–∑–æ–Ω —Å–ø—Ä–µ–¥–∞: ‚ÜîÔ∏è</b> {user_configuration.spread_from / 100.0}' \
                          f' - {user_configuration.spread_to / 100.0}\n' \
                          f'\n' \
                          f'<b>–ü–æ–∫—É–ø–∫–∞ üìâ</b>\n' \
                          f'<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–∏—Ä–∂–∏: üìä</b> {", ".join(user_configuration.exchange_buy)}\n' \
                          f'<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: üí≥</b> {", ".join(user_configuration.payment_buy)}\n' \
                          f'<b>–ü–æ–∫—É–ø–∞–µ—Ç–µ –∫–∞–∫: üë§</b> {user_configuration.trade_type_buy}\n' \
                          f'\n' \
                          f'<b>–ü—Ä–æ–¥–∞–∂–∞ üìà</b>\n' \
                          f'<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –±–∏—Ä–∂–∏: üìä</b> {", ".join(user_configuration.exchange_sell)}\n' \
                          f'<b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: üí≥</b> {", ".join(user_configuration.payment_sell)}\n' \
                          f'<b>–ü—Ä–æ–¥–∞–µ—Ç–µ –∫–∞–∫: üë§</b> {user_configuration.trade_type_sell}\n' \
                          f'\n' \
                          f'<b>–ü–æ–∏—Å–∫ —Å–≤—è–∑–æ–∫: {"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if not user_configuration.deleted else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"}</b>'
        await message.answer_photo(photo='https://i.ibb.co/vXcNK2K/Color-logo-with-background.png',
                                   caption=f'<b>–ü—Ä–æ—Ñ–∏–ª—å:</b> üßëüèΩ‚Äçüíª\n'
                                           f'<b>ID:</b> <code>{message.from_user.id}</code>\n'
                                           f'<b>–ò–º—è:</b> {message.from_user.first_name}\n'
                                           f'\n' + config_text,
                                   reply_markup=ReplyKeyboard.get_web_app_conf_keyboard(config.tg_bot.webapp_url,
                                                                                        config_active))


    @staticmethod
    async def default_message(message: Message):
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n'
                             '/start - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–≤–∑—è–∫–∏\n'
                             '/lk - –î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–æ—Ç–µ\n\n'
                             '–ü–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ <a href=\"https://t.me/BatFlex\">–ú–µ–Ω–µ–¥–∂–µ—Ä—É</a>')

    def register_methods(self):
        self.dp.register_message_handler(UserHandler.user_start, commands=["start"], state="*", **self._general_filters)
        self.dp.register_message_handler(UserHandler.user_lk, commands=["lk"], state="*", **self._general_filters)
        self.dp.register_message_handler(UserHandler.user_not_accessed, bot_access=False)
        self.dp.register_message_handler(UserHandler.default_message, **self._general_filters)
        self.dp.register_pre_checkout_query_handler(UserHandler.process_pre_checkout_query)
